<?xml version="1.0"?>
<project name="Mava Project" default="integration-test">
  <!--  By default, we assume all tools to be on the $PATH  -->
  <property name="pdepend" value="pdepend"/>
  <property name="phpcpd" value="phpcpd"/>
  <property name="phpcs" value="phpcs"/>
  <property name="phpdox" value="phpdox"/>
  <property name="phploc" value="phploc"/>
  <property name="phpmd" value="phpmd"/>
  <property name="phpunit" value="phpunit"/>

  <!-- Target -->
  <target name="codeception-quick-build" depends="prepare,composer,lint,integration-test" description="Performs static analysis, runs the tests, and generates project documentation"/>
  <target name="codeception-full-build" depends="prepare,composer,static-analysis,integration-test,phpdox" description="Performs static analysis, runs the tests, and generates project documentation"/>
  <target name="full-build" depends="prepare,composer,static-analysis,phpunit,phpdox,-check-failure" description="Performs static analysis, runs the tests, and generates project documentation"/>
  <target name="full-build-parallel" depends="prepare,composer,static-analysis-parallel,phpunit,phpdox,-check-failure" description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>
  <target name="quick-build" depends="prepare,composer,lint,phpunit-no-coverage" description="Performs a lint check and runs the tests (without generating code coverage reports)"/>
  <target name="static-analysis" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci" description="Performs static analysis"/>

  <!-- https://github.com/ThePeach/CodeCeption-Ant/blob/master/README.md -->
  <target name="integration-test">
    <parallel failonany="true">
      <sequential>
        <exec executable="/bin/bash">
          <arg value="${basedir}/selenium.sh" />
        </exec>
      </sequential>
      <sequential>
        <waitfor maxwait="1" maxwaitunit="minute">
          <socket server="127.0.0.1" port="4444" />
        </waitfor>
        <antcall target="codeception"/>
        <antcall target="-codecept-failure"/>
      </sequential>
    </parallel>
  </target>
  <target name="codeception-clean">
    <delete dir="${basedir}/tests/_output" includes="**/*" />
    <echo message="Codeception clean" />
  </target>
  <target name="codeception" unless="codeception.done" depends="codeception-clean" description="Run unit tests with Codeception">
    <exec executable="php" resultproperty="result.codeception" taskname="codeception" failonerror="true">
      <arg line="${basedir}/vendor/bin/codecept run" />
    </exec>
    <property name="codeception.done" value="true"/>
  </target>
  <target name="-codecept-failure">
    <fail message="Codeception did not finish successfully">
      <condition>
        <not>
          <equals arg1="${result.codeception}" arg2="0"/>
        </not>
      </condition>
    </fail>
  </target>

  <!--
   Adjust the threadCount attribute's value to the number of CPUs
  -->
  <target name="static-analysis-parallel" description="Performs static analysis (executing the tools in parallel)">
    <parallel threadCount="1">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="lint"/>
      <antcall target="phpcpd-ci"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc-ci"/>
    </parallel>
  </target>
  <target name="clean" unless="clean.done" description="Cleanup build artifacts">
    <delete dir="${basedir}/app/build/api"/>
    <delete dir="${basedir}/app/build/coverage"/>
    <delete dir="${basedir}/app/build/logs"/>
    <delete dir="${basedir}/app/build/pdepend"/>
    <delete dir="${basedir}/app/build/phpdox"/>
    <property name="clean.done" value="true"/>
  </target>
  <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
    <mkdir dir="${basedir}/app/build/api"/>
    <mkdir dir="${basedir}/app/build/coverage"/>
    <mkdir dir="${basedir}/app/build/logs"/>
    <mkdir dir="${basedir}/app/build/pdepend"/>
    <mkdir dir="${basedir}/app/build/phpdox"/>
    <property name="prepare.done" value="true"/>
  </target>
  <target name="composer" description="Installing composer dependencies">
    <exec executable="composer" failonerror="true">
      <arg value="install" />
    </exec>
  </target>
  <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
    <apply executable="php" taskname="lint">
      <arg value="-l"/>
      <fileset dir="${basedir}/src">
        <include name="**/*.php"/>
        <modified/>
      </fileset>
      <fileset dir="${basedir}/tests">
        <include name="**/*.php"/>
        <modified/>
      </fileset>
    </apply>
    <property name="lint.done" value="true"/>
  </target>
  <target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
    <exec executable="${phploc}" taskname="phploc">
      <arg value="--count-tests"/>
      <arg path="${basedir}/src"/>
      <arg path="${basedir}/tests"/>
    </exec>
    <property name="phploc.done" value="true"/>
  </target>
  <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phploc}" taskname="phploc">
      <arg value="--count-tests"/>
      <arg value="--log-csv"/>
      <arg path="${basedir}/app/build/logs/phploc.csv"/>
      <arg value="--log-xml"/>
      <arg path="${basedir}/app/build/logs/phploc.xml"/>
      <arg path="${basedir}/src"/>
      <arg path="${basedir}/tests"/>
    </exec>
    <property name="phploc.done" value="true"/>
  </target>
  <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${pdepend}" taskname="pdepend">
      <arg value="--jdepend-xml=${basedir}/app/build/logs/jdepend.xml"/>
      <arg value="--jdepend-chart=${basedir}/app/build/pdepend/dependencies.svg"/>
      <arg value="--overview-pyramid=${basedir}/app/build/pdepend/overview-pyramid.svg"/>
      <arg path="${basedir}/src"/>
    </exec>
    <property name="pdepend.done" value="true"/>
  </target>
  <target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpmd}" taskname="phpmd">
      <arg path="${basedir}/src"/>
      <arg value="text"/>
      <arg path="${basedir}/app/build/phpmd.xml"/>
    </exec>
    <property name="phpmd.done" value="true"/>
  </target>
  <target name="phpmd-ci" unless="phpmd.done" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpmd}" taskname="phpmd">
      <arg path="${basedir}/src"/>
      <arg value="xml"/>
      <arg path="${basedir}/app/build/phpmd.xml"/>
      <arg value="--reportfile"/>
      <arg path="${basedir}/app/build/logs/pmd.xml"/>
    </exec>
    <property name="phpmd.done" value="true"/>
  </target>
  <target name="phpcs" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpcs}" taskname="phpcs">
      <arg value="--standard=PSR2"/>
      <arg value="--extensions=php"/>
      <arg value="--ignore=autoload.php"/>
      <arg path="${basedir}/src"/>
      <arg path="${basedir}/tests"/>
    </exec>
    <property name="phpcs.done" value="true"/>
  </target>
  <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=${basedir}/app/build/logs/checkstyle.xml"/>
      <arg value="--standard=PSR2"/>
      <arg value="--extensions=php"/>
      <arg value="--ignore=autoload.php"/>
      <arg path="${basedir}/src"/>
      <arg path="${basedir}/tests"/>
    </exec>
    <property name="phpcs.done" value="true"/>
  </target>
  <target name="phpcpd" unless="phpcpd.done" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpcpd}" taskname="phpcpd">
      <arg path="${basedir}/src"/>
    </exec>
    <property name="phpcpd.done" value="true"/>
  </target>
  <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpcpd}" taskname="phpcpd">
      <arg value="--log-pmd"/>
      <arg path="${basedir}/app/build/logs/pmd-cpd.xml"/>
      <arg path="${basedir}/src"/>
    </exec>
    <property name="phpcpd.done" value="true"/>
  </target>
  <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
    <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
      <arg value="--configuration"/>
      <arg path="${basedir}/phpunit.xml"/>
    </exec>
    <property name="phpunit.done" value="true"/>
  </target>
  <target name="phpunit-no-coverage" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit (without generating code coverage reports)">
    <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
      <arg value="--configuration"/>
      <arg path="${basedir}/phpunit.xml"/>
      <arg value="--no-coverage"/>
    </exec>
    <property name="phpunit.done" value="true"/>
  </target>
  <target name="phpdox" unless="phpdox.done" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate project documentation using phpDox">
    <exec executable="${phpdox}" dir="${basedir}/app/build" taskname="phpdox"/>
    <property name="phpdox.done" value="true"/>
  </target>
  <target name="-check-failure">
    <fail message="PHPUnit did not finish successfully">
      <condition>
        <not>
          <equals arg1="${result.phpunit}" arg2="0"/>
        </not>
      </condition>
    </fail>
  </target>
</project>